//file:noinspection GroovyAssignabilityCheck
plugins {
    // Dependencies
    id 'fabric-loom' version '0.11-SNAPSHOT'
    // Mod Hosting Publish
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '1.1.0'
    // Maven Publish
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
    api {
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

loom {
    runs {
        datagen {
            server()

            name 'Data Generation'
            vmArg '-Dfabric-api.datagen'

            runDir 'build/datagen'
        }
    }
}
assemble.dependsOn runDatagen

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group
if (project.hasProperty('SNAPSHOT')) {
    version = "${version}-SNAPSHOT"
}

repositories {
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    flatDir { dirs 'lib' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modCompileOnly "dev.the-fireplace:Fireplace-Lib:${project.fireplacelib_version}:api"
    modRuntimeOnly "dev.the-fireplace:Fireplace-Lib:${project.fireplacelib_version}"
    annotationProcessor "dev.the-fireplace:Annotated-DI:${project.annotateddi_version}:processor"

    modCompileOnly("dev.the-fireplace:Grand-Economy:${project.grandeconomy_version}:api") {
        exclude group: 'dev.the-fireplace'
    }
    modRuntimeOnly("dev.the-fireplace:Grand-Economy:${project.grandeconomy_version}") {
        exclude group: 'dev.the-fireplace'
    }
    /*modImplementation("dev.the-fireplace:Overlord:${project.overlord_version}") {
        exclude group: 'dev.the-fireplace'
    }*/

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(17)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource + sourceSets.api.allSource
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

javadoc {
    source sourceSets.api.allJava
    source sourceSets.main.allJava
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('api')
    from sourceSets.api.output
    from 'src/api/dummyresources/fabric.mod.json'
}

build.dependsOn(apiJar)

jar {
    from sourceSets.api.output
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

configurations {
    apiElements.outgoing.artifact(apiJar)
}

if (hasProperty('curseForgeApiKey')) {
    curseforge {
        apiKey = curseForgeApiKey
        project {
            id = '313915'
            changelog = file('changelog.txt')
            releaseType = project.release_type
            addGameVersion project.minecraft_version
            addGameVersion '1.18'
            addGameVersion 'Java 17'
            addGameVersion 'Fabric'
            mainArtifact(new File(new File(buildDir, 'libs'), "$archivesBaseName-${version}.jar")) {
                displayName = jar.archiveName.replace(".jar", "")
                relations {
                    requiredDependency 'fireplace-lib'
                    optionalDependency 'cloth-config'
                    optionalDependency 'modmenu'
                    optionalDependency 'overlord'
                }
            }
        }
        options {
            javaIntegration = false
            forgeGradleIntegration = false
        }
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

if (hasProperty('modrinthApiKey')) {
    task publishModrinth(type: TaskModrinthUpload) {
        token = modrinthApiKey
        projectId = '00000000'//TODO
        versionNumber = version
        versionName = project.mod_version
        uploadFile = new File(new File(buildDir, 'libs'), "$archivesBaseName-${version}.jar")
        changelog = file('changelog.txt').getText()
        releaseType = project.release_type
        addGameVersion(project.minecraft_version as String)
        addGameVersion('1.18')
        addLoader('fabric')
    }
}

if (hasProperty('nexusUsername') || System.getenv("NEXUS_USERNAME") != null) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'Clans'
                    packaging = 'jar'
                    description = 'A server-side Minecraft mod for land protection and PVP.'
                    url = 'https://www.curseforge.com/minecraft/mc-mods/clans'
                    scm {
                        connection = "scm:svn:https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}.git"
                        developerConnection = "scm:svn:https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}.git"
                        url = "https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}"
                    }

                    licenses {
                        license {
                            name = 'Mozilla Public License 2.0'
                            url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                        }
                    }

                    developers {
                        developer {
                            id = 'the_fireplace'
                            name = 'The_Fireplace'
                            email = 'the.f1repl4ce@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = findProperty('nexusUsername') ?: System.getenv("NEXUS_USERNAME")
                    password = findProperty('nexusPassword') ?: System.getenv("NEXUS_PASSWORD")
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}
